# This is a basic workflow to help you get started with Actions
---
name: CI
on:
  pull_request:
    branches: [ master ]
  issue_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: set api key
      env:
        TEST_API_KEY: ${{ secrets.TEST_API_KEY }}
      run: |
        mkdir -p ~/.config/lftools/
        echo "[github]" >>  ~/.config/lftools/lftools.ini
        echo "token = $TEST_API_KEY" >>  ~/.config/lftools/lftools.ini

    - name: Create comment for PR
      if: github.event_name == 'pull_request'
      uses: peter-evans/create-or-update-comment@v1
      with:
        issue-number: ${{tojson(github.event.number)}}
        body: |
            @${{ github.actor }} testing adding comment.

    - name: Print GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo "The event name is ${{ github.event_name }}"
        echo "$GITHUB_CONTEXT"

    - name: get MODIFIED_FILES
      id: getfile
      run: |
        echo "Start new"
        git ls-remote
        git log -1
        echo "GITHUB_REF $GITHUB_REF"
        echo "GITHUB_EVENT_PATH $GITHUB_EVENT_PATH"
        echo "The PR number is ${{ github.event.number }}"
        PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
        echo "pr number = $PR_NUMBER"
        echo "base ref ${{ github.base_ref }}"
        echo "head ref ${{ github.head_ref }}"
        echo " ${{ github.event.issue.number }}"
        echo " ${{ github.event.issue.pull_request}}"
        #Maybe
        git fetch origin +refs/pull/${{ github.event.issue.number }}/merge
        git checkout FETCH_HEAD
        git log -1


    - name: show git diff
      run: |
        echo "New test"
        echo "${{ github.sha}}"
        echo "${{ github.event.before}}"
        git diff --name-only ${{ github.event.before }} ${{ github.sha }}

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.6'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install lftools


    - name: Match team to INFO.yaml
      #env:
      #  MODIFIED_FILES: ${{ steps.getfile.outputs.files }}
      run: |
        MODIFIED_FILES=$(echo ${{ steps.getfile.outputs.files }})
        PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
        org="$(echo $GITHUB_REPOSITORY | awk -F "/" '{ print $1 }')"
        repo="$(echo $GITHUB_REPOSITORY | awk -F "/" '{ print $2 }')"
        team="$repo-committers"
        echo "modified files are $MODIFIED_FILES"
        echo $org
        echo $repo
        echo $team
        #"$org"/self-service-committer-management
        if [[ "$MODIFIED_FILES" =~ "INFO.yaml" ]]; then
            lftools github list "$org" --teams
            lftools github list "$org" --team $team
            lftools github votes "$org" "$repo" "$PR_NUMBER"
            lftools lfidapi match-ldap-to-info ${{ steps.getfile.outputs.files }} "$team" --githuborg "$org"

        else
            echo "Not a change to an INFO file"
        fi
