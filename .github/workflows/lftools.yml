# This is a basic workflow to help you get started with Actions
---
name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  issue_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
        fetch-depth: '2'
        ref: ${{ github.head_ref }}

    # Runs a single command using the runners shell
    - name: set api key
      env:
        TEST_API_KEY: ${{ secrets.TEST_API_KEY }}
      run: |
        mkdir -p ~/.config/lftools/
        echo "[github]" >>  ~/.config/lftools/lftools.ini
        echo "token = $TEST_API_KEY" >>  ~/.config/lftools/lftools.ini


    # Runs a set of commands using the runners shell
    - name: get MODIFIED_FILES
      id: getfile
      run: |
        echo "Start new"
        git ls-remote
        git fetch --no-tags --depth=1 origin ${{ github.base_ref }}
        git fetch --no-tags --depth=1 origin ${{ github.head_ref }}
        # get the actual source for two branches
        git checkout origin/${{ github.base_ref }}
        git checkout origin/${{ github.head_ref }}
        # get back to the merge commit
        git checkout ${{ github.sha }}
        git diff --name-only origin/${{ github.base_ref }} origin/${{ github.head_ref }}
        git diff --name-only \
          origin/${{ github.base_ref }} origin/${{ github.head_ref }} \
          -- */INFO.yaml
        #CHANGED_SPECS=$(git diff --name-only origin/${{ github.base_ref }} origin/${{ github.head_ref }} -- cypress/integration)
        CHANGED_SPECS=$(git diff --name-only origin/${{ github.base_ref }} origin/${{ github.head_ref }})
        if [ -n "$CHANGED_SPECS" ]; then
          echo "Running the following changed specs"
          echo $CHANGED_SPECS
        fi
        echo "End new"
        #OLD STUFF
        ####
        git fetch origin master:master
        git diff --name-only master
        #echo "::set-output name=files::$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | xargs)"
        echo "::set-output name=files::$(git diff-tree --no-commit-id --name-only master | xargs)"
        ####

    - name: echo output
      run: |
        echo ${{ steps.getfile.outputs.files }}

    - name: show git diff
      run: |
        echo "New test"
        git fetch origin master:master
        git diff --name-only master

        echo "${{ github.sha}}"
        echo "${{ github.event.before}}"
        git diff --name-only ${{ github.event.before }} ${{ github.sha }}

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.6'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install lftools


    - name: Match team to INFO.yaml
      #env:
      #  MODIFIED_FILES: ${{ steps.getfile.outputs.files }}
      run: |
        MODIFIED_FILES=$(echo ${{ steps.getfile.outputs.files }})
        PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
        org="$(echo $GITHUB_REPOSITORY | awk -F "/" '{ print $1 }')"
        repo="$(echo $GITHUB_REPOSITORY | awk -F "/" '{ print $2 }')"
        team="$repo-committers"
        echo "modified files are $MODIFIED_FILES"
        echo $org
        echo $repo
        echo $team
        #"$org"/self-service-committer-management
        if [[ "$MODIFIED_FILES" =~ "INFO.yaml" ]]; then
            lftools github list "$org" --teams
            lftools github list "$org" --team $team
            lftools github votes "$org" "$repo" "$PR_NUMBER"
            lftools lfidapi match-ldap-to-info ${{ steps.getfile.outputs.files }} "$team" --githuborg "$org"

        else
            echo "Not a change to an INFO file"
        fi
